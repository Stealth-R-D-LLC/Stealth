# Copyright (c) 2009-2010 Satoshi Nakamoto
# Copyright (c) 2014-2024 The Stealth Developers
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

# Makefile for Stealth

###########################################################################
#
# INSTRUCTIONS TO BUILD
#
#   https://github.com/StealthSend/Stealth/tree/master/contrib/build.adoc
#
###########################################################################

-include local-env.mk

# DEBUG=1

# Set to 1 to make with miner
MINER=-

INCLUDEPATHS= \
 -I"$(CURDIR)/obj" \
 -I"$(CURDIR)/tor" \
 -I"$(CURDIR)/tor/adapter" \
 -I"$(CURDIR)/leveldb/include" \
 -I"$(CURDIR)/json" \
 -I"$(CURDIR)/bip32" \
 -I"$(CURDIR)/blockchain" \
 -I"$(CURDIR)/client" \
 -I"$(CURDIR)/crypto/argon2/include" \
 -I"$(CURDIR)/crypto/core-hashes" \
 -I"$(CURDIR)/crypto/hashblock" \
 -I"$(CURDIR)/crypto/xorshift1024" \
 -I"$(CURDIR)/primitives" \
 -I"$(CURDIR)/db-bdb" \
 -I"$(CURDIR)/db-leveldb" \
 -I"$(CURDIR)/explore" \
 -I"$(CURDIR)/feeless" \
 -I"$(CURDIR)/network" \
 -I"$(CURDIR)/qpos" \
 -I"$(CURDIR)/rpc" \
 -I"$(CURDIR)/util" \
 -I"$(CURDIR)/wallet"

DEBUGFLAGS = -g


USE_UPNP := -
USE_IPV6 := -


LINK := $(CXX)
ARCH := $(shell uname -m)

DEFS = -DBOOST_SPIRIT_THREADSAFE

ifeq (${PLATFORM}, Windows)
  DEFS += -DWIN32 -DWIN64 -D_WIN32 -D_WIN64 -D_WINDOWS \
          -DBOOST_THREAD_USE_LIB -D__NO_SYSTEM_INCLUDES
  CFLAGS = -mthreads -O2 -msse2 \
           -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \
           $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
  LDFLAGS = -Wl,--nxcompat
else
  CFLAGS = $(INCLUDEPATHS) -std=gnu11 $(DEBUGFLAGS)
endif


incDEFS = $(addprefix -I,$(CURDIR) $(CURDIR)/obj \
                         $(EVENT_INCLUDE_PATH) $(BDB_INCLUDE_PATH) \
                         $(BOOST_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH) \
                         $(CRYPTOPP_INCLUDE_PATH) $(ZLIB_INCLUDE_PATH))
DEFS += $(incDEFS)
LIBS = $(addprefix -L,$(EVENT_LIB_PATH) $(BDB_LIB_PATH) \
                      $(BOOST_LIB_PATH) $(OPENSSL_LIB_PATH) \
                      $(CRYPTOPP_LIB_PATH) $(ZLIB_LIB_PATH))

LIBS += \
   -l db_cxx$(BDB_LIB_SUFFIX) \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l ssl \
   -l crypto \
   -l event \
   -l cryptopp \
   -l z

ifndef USE_UPNP
    override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
    LIBS += -l miniupnpc
    DEFS += -DUSE_UPNP=$(USE_UPNP)
endif

ifneq (${USE_IPV6}, -)
    DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

ifeq (${MINER}, 1)
    DEFS += -DWITH_MINER
endif

# -lgdi32 has to happen after -lcrypto (see  #681)
ifeq (${PLATFORM}, Windows)
    LIBS += -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lwinspool \
            -lwinmm -lshell32 -lcomctl32 -lole32 -loleaut32 -luuid \
            -lrpcrt4 -ladvapi32 -lws2_32 -lmswsock -lshlwapi -liphlpapi
else
    LIBS += -l dl
endif

ifeq (${PLATFORM}, FreeBSD)
    LIBS += -lexecinfo
endif



LIBS += -l pthread


# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING = -fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING += -fstack-protector-all -Wstack-protector

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    ifdef PIE
        HARDENING += -fPIE
        LDHARDENING += -pie
    endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    HARDENING += -D_FORTIFY_SOURCE=2
#


ifdef DEBUG
    OPTIFLAGS = -O0
    DEFS += -DBUILD_WITH_DEBUG
else
    OPTIFLAGS = -O2
endif


EXT_OPTIONS=


# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=$(OPTIFLAGS) $(EXT_OPTIONS) \
          -std=c++14 \
          -pthread \
          -Wall -Wextra -Wno-ignored-qualifiers \
          -Wformat -Wformat-security -Wno-unused-parameter \
          $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(INCLUDEPATHS) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS = $(LDHARDENING) $(LDFLAGS)


OBJS= \
    obj/chainparams.o \
    obj/json_spirit_reader.o \
    obj/json_spirit_value.o \
    obj/json_spirit_writer.o \
    obj/fugue.o \
    obj/hamsi.o \
    obj/groestl.o \
    obj/blake.o \
    obj/bmw.o \
    obj/skein.o \
    obj/keccak.o \
    obj/shavite.o \
    obj/jh.o \
    obj/luffa.o \
    obj/cubehash.o \
    obj/echo.o \
    obj/simd.o \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/stealthaddress.o \
    obj/txdb-leveldb.o \
    obj/stealthtext.o \
    obj/uisqrt.o \
    obj/valtype.o \
    obj/vchnum.o \
    obj/aliases.o \
    obj/meta.o \
    obj/qPoS.o \
    obj/QPConstants.o \
    obj/QPTxDetails.o \
    obj/QPStaker.o \
    obj/QPQueue.o \
    obj/QPPowerElement.o \
    obj/QPPowerRound.o \
    obj/QPRegistry.o \
    obj/QPSlotInfo.o \
    obj/rpcqpos.o \
    obj/ExploreDestination.o \
    obj/ExploreInOutLookup.o \
    obj/ExploreInOutList.o \
    obj/ExploreInput.o \
    obj/ExploreOutput.o \
    obj/ExploreTx.o \
    obj/InOutInfo.o \
    obj/AddrTxInfo.o \
    obj/AddrInOutInfo.o \
    obj/HDTxInfo.o \
    obj/explore.o \
    obj/rpcexplore.o \
    obj/hdkeys.o \
    obj/scrypt.o \
    obj/secp256k1_openssl.o \
    obj/core-hashes.o \
    obj/memzero.o \
    obj/ripemd160.o \
    obj/sha2.o \
    obj/sha3.o \
    obj/XORShift1024Star.o \
    obj/argon2.o \
    obj/core.o \
    obj/encoding.o \
    obj/ref.o \
    obj/thread.o \
    obj/blake2b.o \
    obj/FeeworkBuffer.o \
    obj/Feework.o \
    obj/feeless.o \
    obj/nft-mainnet-data.o \
    obj/nft-testnet-data.o \
    obj/nfts.o \
    obj/QPNft.o

all: StealthCoind

# auto-generated dependencies:
-include obj/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h

client/version.cpp: obj/build.h

DEFS += -DHAVE_BUILD_INFO

include tor/tor-include.mk

obj/%.o: %.c
	$(CC) -c $(incDEFS) $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: crypto/core-hashes/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: crypto/core-hashes/%.c
	$(CC) -c $(incDEFS) $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: crypto/hashblock/%.c
	$(CC) -c $(incDEFS) $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: crypto/argon2/src/%.c
	$(CC) -c $(incDEFS) $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: crypto/argon2/src/blake2/%.c
	$(CC) -c $(incDEFS) $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: crypto/xorshift1024/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: bip32/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: blockchain/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: client/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: primitives/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: db-bdb/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: db-leveldb/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: explore/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: feeless/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: network/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: qpos/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: rpc/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: util/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: wallet/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: json/%.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/toradapter.o: tor/adapter/toradapter.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
            -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

leveldb/out-static/libleveldb.a:
	cd leveldb && TARGET_OS=$(LEVELDB_TARGET) make -f Makefile.static

leveldb/out-static/libmemenv.a: leveldb/out-static/libleveldb.a

StealthCoind: $(OBJS:obj/%=obj/%) obj/toradapter.o leveldb/out-static/libleveldb.a leveldb/out-static/libmemenv.a
	$(CXX) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ $(xLDFLAGS) $(LIBS)

rinse:
	-rm -f StealthCoind test_stealthcoin
	-rm -f obj/*.o
	-rm -f obj-test/*.o
	-rm -f obj/*.P
	-rm -f obj-test/*.P
	-rm -f obj/build.h
	cd leveldb && make -f Makefile.static clean

clean:
	-rm -f StealthCoind test_stealthcoin
	-rm -f obj/*.o
	-rm -f obj-test/*.o
	-rm -f obj/*.P
	-rm -f obj-test/*.P
	-rm -f obj/build.h
	cd leveldb && make -f Makefile.static clean


FORCE:
