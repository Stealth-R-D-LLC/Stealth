
#include "hash.h"

#include "test-utils.hpp"


using namespace std;

int main(int argc, char **argv)
{
    set_debug(argc, argv);

    testing::InitGoogleTest(&argc, argv);

    return RUN_ALL_TESTS();
}

class HashTest : public ::testing::Test
{
protected:
    void SetUp() override {}
    void TearDown() override {}
};


TEST_F(HashTest, SHA256Test)
{
    vector<unsigned char> bytesInput = {
        0x73, 0xe0, 0x66, 0x77, 0xa8, 0xf2, 0x1e, 0xa1, 0x6f, 0x50, 0x23, 0x0b,
        0xf4, 0x5f, 0x2b, 0x3e, 0x20, 0x7d, 0xea, 0x66, 0xf1, 0x55, 0x54, 0xbb,
        0xbb, 0x09, 0xcb, 0x15, 0xae, 0x49, 0xc4, 0x71, 0x17, 0x56, 0xf3, 0x36,
        0xf4, 0xf8, 0x33, 0x62, 0x3a, 0xa6, 0x08, 0xcc, 0xf7, 0xf4, 0xd2, 0x47,
        0xc4, 0x2e, 0xb9, 0xae, 0x0a, 0x5a, 0x99, 0xf5, 0x33, 0x89, 0x29, 0xb6,
        0x2c, 0x2a, 0xbb, 0xa6 };

    uchar_vector input = {
        0x73, 0xe0, 0x66, 0x77, 0xa8, 0xf2, 0x1e, 0xa1, 0x6f, 0x50, 0x23, 0x0b,
        0xf4, 0x5f, 0x2b, 0x3e, 0x20, 0x7d, 0xea, 0x66, 0xf1, 0x55, 0x54, 0xbb,
        0xbb, 0x09, 0xcb, 0x15, 0xae, 0x49, 0xc4, 0x71, 0x17, 0x56, 0xf3, 0x36,
        0xf4, 0xf8, 0x33, 0x62, 0x3a, 0xa6, 0x08, 0xcc, 0xf7, 0xf4, 0xd2, 0x47,
        0xc4, 0x2e, 0xb9, 0xae, 0x0a, 0x5a, 0x99, 0xf5, 0x33, 0x89, 0x29, 0xb6,
        0x2c, 0x2a, 0xbb, 0xa6 };

    PrintTestingData("SHA256", "Input", input);

    uchar_vector output = sha256(input);
    PrintTestingData("SHA256", "Output", output);

    ASSERT_EQ(output.size(), 32);

    uchar_vector expected_output = {
        0x21, 0x7d, 0x44, 0xae, 0x39, 0xb5, 0x3e, 0x33, 0xc6, 0x97, 0x1d, 0xcf,
        0x7f, 0x95, 0xdc, 0x1f, 0x40, 0x32, 0x0e, 0x1b, 0xb6, 0x93, 0x1a, 0x53,
        0x86, 0x6b, 0x12, 0x8a, 0x0c, 0x8a, 0xfb, 0x86 };

    PrintTestingData("SHA256", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, SHA256_2Test)
{
    uchar_vector input = {
        0xda, 0x1c, 0x7a, 0x08, 0x54, 0xc0, 0x1f, 0x5d, 0x03, 0xaa, 0x8f, 0x18,
        0xa7, 0x04, 0x8c, 0xc4, 0x6c, 0x75, 0x04, 0xb1, 0xb3, 0xd5, 0x92, 0x98,
        0x3a, 0xf8, 0x53, 0x7a, 0x40, 0x1a, 0x00, 0x6f, 0x06, 0xd6, 0xec, 0xd4,
        0x99, 0x4c, 0xae, 0xd6, 0xba, 0x91, 0xc8, 0x8a, 0x99, 0x4d, 0xcc, 0x31,
        0x3e, 0xeb, 0x05, 0xd3, 0x7b, 0x4c, 0xc4, 0xd0, 0x71, 0xa0, 0x46, 0x3f,
        0x16, 0xaf, 0x0e, 0x0a };

    PrintTestingData("SHA256_2", "Input", input);

    uchar_vector output = sha256_2(input);
    PrintTestingData("SHA256_2", "Output", output);

    ASSERT_EQ(output.size(), 32);

    uchar_vector expected_output = {
        0x99, 0xa7, 0x21, 0x8e, 0xac, 0xf7, 0x7e, 0x20, 0xfd, 0x74, 0xe9, 0x28,
        0x09, 0x3f, 0x14, 0x98, 0x51, 0x2a, 0xce, 0xd7, 0x48, 0x2b, 0xdf, 0x12,
        0x4b, 0x98, 0x45, 0x52, 0x56, 0xb3, 0x61, 0xa5 };

    PrintTestingData("SHA256_2", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, SHA256dTest)
{
    uchar_vector input = {
        0x2f, 0x7d, 0x1c, 0x42, 0x5d, 0xa3, 0x1d, 0x97, 0xc3, 0x78, 0x8a, 0x7e,
        0xe8, 0xff, 0xb8, 0x32, 0xfe, 0x7e, 0x5e, 0xc5, 0x05, 0x2c, 0x7f, 0x45,
        0x3b, 0x7c, 0x4c, 0xe8, 0xf1, 0xf5, 0x2c, 0x2c, 0xfd, 0xb3, 0xc7, 0xbd,
        0xae, 0x90, 0x34, 0xf1, 0x08, 0x31, 0xb5, 0x79, 0x27, 0x68, 0xfa, 0x37,
        0x37, 0x4e, 0xae, 0x07, 0xf7, 0x2e, 0x7e, 0x4f, 0x86, 0x23, 0x06, 0x58,
        0x6f, 0x41, 0xeb, 0x4e };

    PrintTestingData("SHA256d", "Input", input);

    uchar_vector output = sha256d(input);
    PrintTestingData("SHA256d", "Output", output);

    ASSERT_EQ(output.size(), 32);

    uchar_vector expected_output = {
        0x3f, 0x7e, 0xa8, 0xda, 0x71, 0xae, 0x5c, 0x43, 0x13, 0x21, 0xbc, 0xf3,
        0x7d, 0x36, 0xb8, 0xdc, 0x1b, 0x84, 0x38, 0x7a, 0x5f, 0x50, 0xd8, 0x10,
        0xfc, 0x69, 0x22, 0x41, 0x98, 0x30, 0x2d, 0xeb };

    PrintTestingData("SHA256d", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, RIPEMD160Test)
{
    uchar_vector input = {
        0xd0, 0x9b, 0x9e, 0x03, 0xbf, 0x5d, 0x28, 0xb9, 0xe8, 0xe2, 0x3e, 0x53,
        0xff, 0xe8, 0xde, 0x70, 0xc8, 0xd8, 0xff, 0x2e, 0xeb, 0x98, 0x90, 0x43,
        0x5b, 0xe1, 0xca, 0xc5, 0x65, 0xc7, 0xcd, 0xf3, 0x6e, 0x2e, 0xf2, 0x72,
        0xcd, 0xcd, 0x34, 0x0a, 0x7f, 0xbf, 0xeb, 0x0a, 0xc0, 0x2e, 0x69, 0xdf,
        0x0f, 0xf0, 0x5f, 0x4c, 0x00, 0x02, 0x82, 0xe7, 0xa3, 0xb7, 0xfb, 0xca,
        0x0c, 0xd8, 0x76, 0x59 };

    PrintTestingData("RIPEMD160", "Input", input);

    uchar_vector output = ripemd160(input);
    PrintTestingData("RIPEMD160", "Output", output);

    ASSERT_EQ(output.size(), 20);

    uchar_vector expected_output = {
        0x3c, 0xde, 0xdf, 0x56, 0xd4, 0x5c, 0xe3, 0x41, 0xe4, 0x2e, 0x55, 0xc9,
        0x99, 0xb3, 0xc6, 0x15, 0x70, 0xc9, 0x8e, 0x39 };

    PrintTestingData("RIPEMD160", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, Hash160Test)
{
    uchar_vector input = {
        0x90, 0x78, 0x43, 0x19, 0xc6, 0x7d, 0x8c, 0xea, 0x2e, 0xee, 0xc7, 0x9f,
        0xd6, 0xfa, 0x67, 0x5e, 0x56, 0x2e, 0xb2, 0x5b, 0x30, 0xbd, 0xe4, 0xd5,
        0x74, 0xaa, 0xfb, 0x82, 0xac, 0xb6, 0x59, 0x9b, 0x7f, 0x3f, 0x5f, 0x14,
        0x85, 0x9a, 0xa9, 0x71, 0xf0, 0x4c, 0x4f, 0x88, 0xd9, 0x03, 0xd6, 0xf3,
        0xcc, 0xc8, 0x77, 0x2d, 0x69, 0x4d, 0x44, 0x1b, 0x34, 0xa6, 0x0b, 0xf9,
        0x0e, 0x7e, 0x08, 0x66 };

    PrintTestingData("Hash160", "Input", input);

    uchar_vector output = hash160(input);
    PrintTestingData("Hash160", "Output", output);

    ASSERT_EQ(output.size(), 20);

    uchar_vector expected_output = {
        0xb2, 0xe0, 0x20, 0x04, 0xaf, 0x6e, 0x15, 0xa5, 0x81, 0x7b, 0x0a, 0x66,
        0xc2, 0x4e, 0x3d, 0x03, 0x9f, 0x58, 0x6a, 0x1f };

    PrintTestingData("Hash160", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, MDSHATest)
{
    uchar_vector input = {
        0x7d, 0xe0, 0x88, 0x97, 0xd3, 0x57, 0x54, 0x61, 0xec, 0x02, 0x1a, 0x4c,
        0x52, 0xf5, 0xd2, 0x79, 0x48, 0x86, 0xa6, 0x07, 0x5c, 0xda, 0x81, 0x6b,
        0x24, 0x75, 0x14, 0xb6, 0xb1, 0x7d, 0x5a, 0x42, 0x50, 0xc0, 0x30, 0xee,
        0x61, 0xc8, 0xb8, 0x77, 0xc9, 0x7a, 0xb6, 0x99, 0x77, 0x1e, 0x47, 0x17,
        0x66, 0x3d, 0xeb, 0xd8, 0xc7, 0xa7, 0xba, 0x21, 0xd6, 0xcf, 0x00, 0xb6,
        0x05, 0x00, 0x36, 0x9c };

    PrintTestingData("MDSHA", "Input", input);

    uchar_vector output = mdsha(input);
    PrintTestingData("MDSHA", "Output", output);

    ASSERT_EQ(output.size(), 20);

    uchar_vector expected_output = {
        0x7d, 0x3b, 0x99, 0x07, 0xdf, 0x9d, 0x02, 0x62, 0xd0, 0xac, 0x3e, 0x66,
        0xbc, 0x59, 0xee, 0x9c, 0x98, 0x57, 0x07, 0x9d };

    PrintTestingData("MDSHA", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, SHA1Test)
{
    uchar_vector input = {
        0x06, 0xa2, 0x18, 0x92, 0xb8, 0x45, 0xc4, 0xd9, 0xec, 0x84, 0x86, 0x4e,
        0x67, 0x96, 0x6f, 0xf4, 0x75, 0x11, 0x44, 0x6c, 0xf7, 0xc5, 0xcc, 0x02,
        0xac, 0xd6, 0x99, 0x4a, 0x6e, 0x41, 0x81, 0x75, 0x23, 0xd4, 0xe8, 0x55,
        0xfb, 0xa7, 0xa9, 0xd6, 0x6c, 0xd3, 0x95, 0xe6, 0x67, 0x5c, 0x56, 0xf0,
        0x34, 0x3c, 0xed, 0x3b, 0x55, 0xf0, 0xc6, 0x04, 0x91, 0x95, 0x63, 0xe2,
        0x67, 0x2c, 0x82, 0xc7 };

    PrintTestingData("SHA1", "Input", input);

    uchar_vector output = sha1(input);
    PrintTestingData("SHA1", "Output", output);

    ASSERT_EQ(output.size(), 20);

    uchar_vector expected_output = {
        0x1b, 0x86, 0x55, 0x29, 0xc9, 0xdb, 0x5a, 0x77, 0x0d, 0x13, 0x0f, 0x40,
        0xe2, 0xa3, 0xbd, 0x86, 0x42, 0xd4, 0x55, 0xd2 };

    PrintTestingData("SHA1", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, HMACSHA256Test)
{
    uchar_vector key = {
        0xf4, 0x6b, 0xf3, 0xbb, 0xe3, 0xd2, 0xb4, 0x7a, 0xfe, 0xcc, 0x3e, 0xa8,
        0x35, 0x4e, 0xc0, 0xca, 0xab, 0x62, 0x96, 0x11, 0xdb, 0x7a, 0x77, 0xf3,
        0xf7, 0xef, 0x75, 0xe3, 0x36, 0x3a, 0x52, 0xd4 };

    uchar_vector data = {
        0xd5, 0x48, 0xe1, 0x80, 0x62, 0xfa, 0xcb, 0x9c, 0xab, 0x7d, 0xf5, 0xbe,
        0xc6, 0x86, 0xe2, 0x9f, 0xe3, 0xcf, 0xae, 0x5a, 0xfb, 0x76, 0xa0, 0x54,
        0x21, 0x51, 0x5b, 0x71, 0x1d, 0xa2, 0x48, 0x09, 0xaa, 0x6b, 0xad, 0x8f,
        0xca, 0x21, 0x35, 0xd8, 0x77, 0x65, 0x26, 0xf1, 0x71, 0x1e, 0xd1, 0x47,
        0xf7, 0x55, 0x7c, 0x9a, 0xfb, 0x69, 0xa8, 0x67, 0x91, 0x30, 0x8a, 0x83,
        0x89, 0xd6, 0xfd, 0x30 };

    PrintTestingData("HMAC_SHA256", "Key", key);
    PrintTestingData("HMAC_SHA256", "Data", data);

    uchar_vector output = hmac_sha256(key, data);
    PrintTestingData("HMAC_SHA256", "Output", output);

    ASSERT_EQ(output.size(), 32);

    uchar_vector expected_output = {
        0x26, 0xed, 0xfb, 0x5c, 0x9d, 0x8c, 0xac, 0x4e, 0x15, 0x82, 0x48, 0x5e,
        0x33, 0x21, 0xb8, 0x77, 0x2a, 0xe1, 0x96, 0xef, 0x01, 0x16, 0xc1, 0x4c,
        0xfe, 0x3c, 0x7b, 0x5c, 0x3c, 0x97, 0xbf, 0x82 };

    PrintTestingData("HMAC_SHA256", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, HMACSHA512Test)
{
    uchar_vector key = {
        0x36, 0x2d, 0x7f, 0x28, 0xec, 0xf3, 0x86, 0xfe, 0x30, 0x9f, 0xdb, 0x0c,
        0xfd, 0x54, 0x74, 0x91, 0xa2, 0x55, 0xd6, 0xd3, 0x6e, 0x1f, 0xa2, 0x82,
        0x79, 0xe3, 0xa4, 0xd0, 0x40, 0xcc, 0xad, 0x1b };

    uchar_vector data = {
        0x7a, 0x42, 0xe9, 0x6a, 0x33, 0xbf, 0xe7, 0x59, 0xb2, 0x67, 0xb5, 0xb8,
        0x96, 0x29, 0x0f, 0x00, 0xee, 0xec, 0x48, 0x56, 0x0b, 0x0b, 0xf3, 0xd5,
        0x6c, 0x30, 0x94, 0xcf, 0xd1, 0x13, 0x11, 0x8f, 0x87, 0x40, 0xdc, 0x99,
        0x05, 0xee, 0x6e, 0x28, 0xe0, 0x7d, 0x18, 0xf9, 0x26, 0x0c, 0xe4, 0xc2,
        0x39, 0x22, 0x8e, 0x58, 0x47, 0x56, 0x95, 0xd6, 0x1e, 0xc6, 0xb8, 0xb2,
        0x3a, 0x38, 0xb5, 0x2b };

    PrintTestingData("HMAC_SHA512", "Key", key);
    PrintTestingData("HMAC_SHA512", "Data", data);

    uchar_vector output = hmac_sha512(key, data);
    PrintTestingData("HMAC_SHA512", "Output", output);

    ASSERT_EQ(output.size(), 64);

    uchar_vector expected_output = {
        0xe7, 0x99, 0xc1, 0xe2, 0x18, 0x5b, 0x6f, 0xde, 0x12, 0x3a, 0xec, 0xba,
        0x54, 0xae, 0x67, 0x4c, 0x60, 0x6f, 0x84, 0x96, 0x5f, 0x45, 0x14, 0x54,
        0x1d, 0x8c, 0x8a, 0xd9, 0xe8, 0xa6, 0x8a, 0x22, 0xe6, 0x34, 0x64, 0xc1,
        0xb0, 0x38, 0x0a, 0xce, 0x4a, 0xd8, 0x5c, 0x69, 0x19, 0xf5, 0x5c, 0x88,
        0x6f, 0x95, 0xcc, 0xa1, 0xdb, 0x31, 0xf9, 0x0b, 0xc2, 0xd7, 0x7b, 0x5d,
        0x34, 0x0f, 0x3d, 0x9e };

    PrintTestingData("HMAC_SHA512", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, Hash9Test)
{
    uchar_vector input = {
        0x37, 0x89, 0x0d, 0x19, 0x24, 0x86, 0x70, 0x57, 0xd2, 0xdc, 0x5c, 0x96,
        0x47, 0x27, 0xc6, 0x89, 0x02, 0xe5, 0xa6, 0xd5, 0x60, 0xd1, 0x28, 0xdd,
        0xd5, 0xb2, 0x6e, 0x91, 0xe0, 0x52, 0xfd, 0x69, 0xe0, 0x20, 0x0d, 0x74,
        0xc4, 0xd1, 0xb7, 0xfd, 0xed, 0x5a, 0x1b, 0x81, 0xb2, 0xca, 0x76, 0xe7,
        0x0e, 0x9d, 0xd6, 0xda, 0x81, 0xd8, 0xc2, 0x9f, 0xc3, 0x5c, 0xe2, 0xa2,
        0x97, 0x05, 0x3c, 0x10 };

    PrintTestingData("Hash9", "Input", input);

    uchar_vector output = hash9(input);
    PrintTestingData("Hash9", "Output", output);

    ASSERT_EQ(output.size(), 32);

    uchar_vector expected_output = {
        0x25, 0x63, 0x8b, 0x78, 0x0a, 0x1e, 0x5a, 0xf3, 0x26, 0x54, 0x35, 0x3c,
        0x7e, 0x50, 0x5a, 0xc7, 0x5f, 0x8b, 0xe0, 0x70, 0x61, 0x99, 0xeb, 0xac,
        0x44, 0x8f, 0xa8, 0x1e, 0xa6, 0xf6, 0x9e, 0x3a };

    PrintTestingData("Hash9", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, SHA3_256Test)
{
    uchar_vector input = {
        0x80, 0xbc, 0xf4, 0x70, 0x00, 0xd5, 0x5b, 0x6b, 0x6a, 0xce, 0xed, 0xd3,
        0xae, 0x63, 0xe3, 0x6f, 0x3b, 0x05, 0xde, 0x53, 0x32, 0xf3, 0x48, 0x69,
        0x29, 0x47, 0x17, 0x78, 0x34, 0x85, 0xa5, 0x98, 0x8c, 0x22, 0x32, 0xdf,
        0x72, 0x73, 0x97, 0x5e, 0x8f, 0x7b, 0xf6, 0xdf, 0xb4, 0xb2, 0x5e, 0x8e,
        0x87, 0x06, 0xb6, 0xb2, 0x89, 0x2a, 0x92, 0x00, 0x28, 0x7d, 0x12, 0x98,
        0x7f, 0x0d, 0x48, 0x09 };

    PrintTestingData("SHA3_256", "Input", input);

    uchar_vector output = sha3_256(input);
    PrintTestingData("SHA3_256", "Output", output);

    ASSERT_EQ(output.size(), 32);

    uchar_vector expected_output = {
        0xfe, 0xca, 0x09, 0xea, 0x44, 0xe0, 0x18, 0x0b, 0xf3, 0xef, 0x8f, 0x9a,
        0x06, 0x29, 0xa8, 0xed, 0x86, 0xab, 0x49, 0x4e, 0x6e, 0x45, 0x44, 0x3d,
        0x07, 0xa3, 0x0a, 0xcc, 0xc6, 0x19, 0xd9, 0x51 };

    PrintTestingData("SHA3_256", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, Keccak_256Test)
{
    uchar_vector input = {
        0x37, 0x9e, 0xa0, 0x05, 0x88, 0x34, 0x75, 0x7f, 0x3b, 0xb6, 0x08, 0x8b,
        0x14, 0xfc, 0x31, 0x70, 0xe4, 0x8e, 0x51, 0x95, 0x38, 0xc8, 0x07, 0xc3,
        0x12, 0xaa, 0x4c, 0x21, 0x8c, 0x8f, 0x2b, 0xff, 0x07, 0xbd, 0x83, 0xab,
        0xb1, 0x21, 0x57, 0xf1, 0x37, 0x49, 0x97, 0x0e, 0x8d, 0xec, 0x7f, 0xf9,
        0x8d, 0xcc, 0x14, 0x94, 0x47, 0xea, 0x01, 0x21, 0x89, 0x64, 0x10, 0x71,
        0x25, 0xc2, 0x2d, 0x8c };

    PrintTestingData("Keccak_256", "Input", input);

    uchar_vector output = keccak_256(input);
    PrintTestingData("Keccak_256", "Output", output);

    ASSERT_EQ(output.size(), 32);

    uchar_vector expected_output = {
        0x48, 0x54, 0xa3, 0xf2, 0x7f, 0x69, 0x8d, 0x2a, 0x83, 0xcd, 0x0b, 0xea,
        0xbe, 0x8f, 0x35, 0x52, 0xe9, 0x9c, 0x66, 0x40, 0x3d, 0xf4, 0xe4, 0xb0,
        0xd5, 0x85, 0xce, 0x30, 0x6c, 0xdd, 0xc6, 0x59 };

    PrintTestingData("Keccak_256", "Expected Output", expected_output);

    ASSERT_EQ(output, expected_output);
}

TEST_F(HashTest, Scrypt1024_1_1_256Test)
{
    // legacy code from Ciphrex requires 80 byte input
    uchar_vector input80 = {
        0xe6, 0x31, 0xff, 0xd7, 0xc1, 0x6b, 0x94, 0x44, 0xb1, 0xb4, 0x09, 0xf6,
        0x28, 0x71, 0xeb, 0xdf, 0x7b, 0x48, 0x9a, 0x93, 0xb7, 0xdb, 0xd1, 0x30,
        0x3a, 0xec, 0x84, 0x3d, 0x25, 0x53, 0xdb, 0x1e, 0x36, 0x2b, 0xba, 0xd4,
        0x3d, 0x9e, 0xf8, 0x57, 0x7f, 0x0e, 0x6a, 0x23, 0x4c, 0x7d, 0x4a, 0xaa,
        0xd4, 0x9c, 0xda, 0x63, 0xdf, 0x7d, 0xe6, 0x9e, 0x8b, 0x6d, 0xbd, 0xc6,
        0x75, 0x00, 0xcc, 0x23, 0x6f, 0x35, 0x1d, 0x9f, 0x2c, 0x73, 0x20, 0x37,
        0xdc, 0x13, 0xfb, 0x98, 0x05, 0x26, 0xbb, 0xf3 };

    PrintTestingData("Scrypt_1024_1_1_256", "Input: 80", input80);

    uchar_vector output80 = scrypt_1024_1_1_256(input80);
    PrintTestingData("Scrypt_1024_1_1_256", "Output: 80", output80);

    ASSERT_EQ(output80.size(), 32);

    uchar_vector expected_output80 = {
        0x6f, 0x32, 0xc5, 0xee, 0xcb, 0x4f, 0xa4, 0x7a, 0xd5, 0x2a, 0x07, 0x35,
        0x2e, 0x0e, 0x2c, 0x79, 0x86, 0xf9, 0xf2, 0xa5, 0xb7, 0xf0, 0x77, 0x9e,
        0xbf, 0x52, 0xe0, 0x21, 0x79, 0x24, 0x15, 0x85 };

    PrintTestingData("Scrypt_1024_1_1_256",
                     "Expected Output: 80",
                     expected_output80);

    ASSERT_EQ(output80, expected_output80);

#if OPENSSL_VERSION_NUMBER >= 0x10100000L
    // OpenSSL allows input of any length
    uchar_vector input32 = {
        0x9a, 0x2e, 0x2a, 0x78, 0x24, 0x88, 0x18, 0x11, 0xb4, 0x70, 0x50, 0x1a,
        0xe7, 0x75, 0x74, 0x2b, 0x58, 0x32, 0x2a, 0x81, 0x24, 0x82, 0x53, 0x48,
        0xf4, 0xff, 0xbd, 0x25, 0xe7, 0x7f, 0x53, 0x7d };

    PrintTestingData("Scrypt_1024_1_1_256", "Input: 32", input32);

    uchar_vector output32 = scrypt_1024_1_1_256(input32);
    PrintTestingData("Scrypt_1024_1_1_256", "Output: 32", output32);

    uchar_vector expected_output32 = {
        0x05, 0xcd, 0x04, 0x2e, 0x21, 0x01, 0xe0, 0xb9, 0xfa, 0xae, 0xc3, 0x26,
        0x83, 0x09, 0xbc, 0xf1, 0xe3, 0x4c, 0x5e, 0x0c, 0x39, 0x1f, 0x8a, 0x26,
        0xe0, 0x05, 0x80, 0x68, 0x02, 0xd4, 0x74, 0x5d };

    PrintTestingData("Scrypt_1024_1_1_256",
                     "Expected Output: 32",
                     expected_output32);

    ASSERT_EQ(output32, expected_output32);
#endif
}

